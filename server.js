// server.js
// ============ CONFIG ============
import { OpenAI } from "openai";

// TODO(you): –í–°–¢–ê–í –°–Æ–î–ò OpenAI API –∫–ª—é—á
const OPENAI_API_KEY = "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"; // <‚Äî –í–°–¢–ê–í –°–í–Ü–ô –ö–õ–Æ–ß

// GitHub –¥–æ—Å—Ç—É–ø (–ü–†–Ø–ú–û –í –ö–û–î–Ü, —è–∫ –ø—Ä–æ—Å–∏–≤)
const GITHUB_TOKEN = "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";                 // <‚Äî —Ç–≤—ñ–π GitHub Personal Access Token (repo scope)
const GITHUB_OWNER = "Yalloma100";         // <‚Äî –≤–ª–∞—Å–Ω–∏–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
const GITHUB_REPO  = "BDBotRead";         // <‚Äî –Ω–∞–∑–≤–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é, –¥–µ –±—É–¥–µ "–ë–î"

// –Ñ–¥–∏–Ω–∏–π —Ñ–∞–π–ª "–ë–î" –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó:
const FILE_USERS_DB = "users.json";

// ADMIN (–º–∞—î –ø–æ–≤–Ω—ñ –ø—Ä–∞–≤–∞)
const ADMIN_ID = 6133407632; // —Ç–≤—ñ–π ID

// Telegram –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ ENV (–±–µ–∑–ø–µ—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –Ω–∞ Render)
const BOT_TOKEN = "8285002916:AAHZJXjZgT1G9RxV2bjqLgGnaC73iDWhKT4";   // BotFather token
const API_ID = 27340376;
const API_HASH = "d0e2e0d908496af978537c1ac918bdab";

if (!BOT_TOKEN || !API_ID || !API_HASH) {
  console.error("‚ùå Set BOT_TOKEN, API_ID, API_HASH env vars!");
  process.exit(1);
}
if (OPENAI_API_KEY === "YOUR_OPENAI_API_KEY_HERE") {
    console.warn("‚ö†Ô∏è OpenAI API Key is not set! Reading function will fail.");
}

// ============ IMPORTS ============
import express from "express";
import axios from "axios";
import { Octokit } from "@octokit/rest";
import { TelegramClient, Api } from "telegram";
import { StringSession } from "telegram/sessions/index.js";

// ============ GLOBALS ============
const app = express();
app.use(express.json());
const PORT = process.env.PORT || 3000;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

// Clients
const octokit = new Octokit({ auth: GITHUB_TOKEN });
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥—ñ–∞–ª–æ–≥—É –≤ –ø–∞–º'—è—Ç—ñ
const userState = new Map();

// ============ GitHub & DATA HELPERS ============
async function ghGetFile(path) {
  try {
    const { data } = await octokit.repos.getContent({
      owner: GITHUB_OWNER,
      repo: GITHUB_REPO,
      path
    });
    const content = Buffer.from(data.content, "base64").toString("utf8");
    return { sha: data.sha, content };
  } catch (e) {
    if (e.status === 404) return null;
    throw e;
  }
}

async function ghPutFile(path, text, message) {
  const existing = await ghGetFile(path);
  const content = Buffer.from(text, "utf8").toString("base64");
  const params = {
    owner: GITHUB_OWNER,
    repo: GITHUB_REPO,
    path,
    message,
    content,
    committer: { name: "tg-userbot-bot", email: "bot@example.com" }
  };
  if (existing && existing.sha) params.sha = existing.sha;
  const { data } = await octokit.repos.createOrUpdateFileContents(params);
  return data;
}

async function ghReadJson(path, fallback) {
  const file = await ghGetFile(path);
  if (!file) return fallback;
  try {
    return JSON.parse(file.content);
  } catch {
    return fallback;
  }
}

async function ghWriteJson(path, obj, message) {
  const text = JSON.stringify(obj, null, 2);
  await ghPutFile(path, text, message);
}

async function ensureDbFile() {
  const db = await ghReadJson(FILE_USERS_DB, null);
  if (db === null) {
    await ghWriteJson(FILE_USERS_DB, {}, "init users.json database");
  }
}

async function getAllUsersData() {
    return await ghReadJson(FILE_USERS_DB, {});
}

async function getUserData(userId) {
    const allData = await getAllUsersData();
    if (!allData[userId]) {
        return { accounts: [] };
    }
    return allData[userId];
}

async function saveUserData(userId, data) {
    const allData = await getAllUsersData();
    allData[String(userId)] = data;
    await ghWriteJson(FILE_USERS_DB, allData, `Update data for user ${userId}`);
}


// ============ TELEGRAM BOT HELPERS ============
async function sendText(chat_id, text, extra = {}) {
  try {
    const response = await axios.post(`${TELEGRAM_API}/sendMessage`, { chat_id, text, parse_mode: "HTML", ...extra });
    return response.data.result;
  } catch (error) {
    console.error("Send message error:", error.response?.data || error.message);
    return null;
  }
}

async function editText(chat_id, message_id, text, extra = {}) {
    try {
        await axios.post(`${TELEGRAM_API}/editMessageText`, { chat_id, message_id, text, parse_mode: "HTML", ...extra });
    } catch (error) {
        if (!error.response?.data?.description.includes("message is not modified")) {
            console.error("Edit message error:", error.response?.data || error.message);
        }
    }
}

async function deleteMessage(chat_id, message_id) {
    try {
        await axios.post(`${TELEGRAM_API}/deleteMessage`, { chat_id, message_id });
    } catch (error) {}
}

function escapeHtml(s) {
  return String(s).replace(/[<>&]/g, c => ({ "<": "&lt;", ">": "&gt;", "&": "&amp;" }[c]));
}

// ============ AUTH FLOW (GramJS) ============
async function startInteractiveLogin(userId, chatId, phone) {
    const state = userState.get(userId) || {};
    state.step = 'interactive_login';
    state.data = { ...state.data, phone, codeResolver: null, passResolver: null };
    userState.set(userId, state);
    const client = new TelegramClient(new StringSession(""), API_ID, API_HASH, { connectionRetries: 5, useWSS: true });
    await client.start({
        phoneNumber: async () => phone,
        phoneCode: async () => {
            state.step = "awaiting_code";
            await sendText(chatId, "–ù–∞–¥—ñ—à–ª–∏ –∫–æ–¥, —è–∫–∏–π –Ω–∞–¥—ñ–π—à–æ–≤ —É Telegram –∞–±–æ SMS.\n<b>–§–æ—Ä–º–∞—Ç: 1-2-3-4-5</b>.");
            return new Promise(resolve => {
                state.data.codeResolver = resolve;
                userState.set(userId, state);
            });
        },
        password: async () => {
            state.step = "awaiting_2fa";
            await sendText(chatId, "–í–≤–µ–¥–∏ 2FA –ø–∞—Ä–æ–ª—å (—è–∫—â–æ –≤—ñ–Ω —î). –Ø–∫—â–æ –ø–∞—Ä–æ–ª—è –Ω–µ–º–∞—î, –Ω–∞–ø–∏—à–∏: <code>–Ω–µ–º–∞</code>");
            return new Promise(resolve => {
                state.data.passResolver = resolve;
                userState.set(userId, state);
            });
        },
        onError: (e) => console.error(`Auth error for ${phone}:`, e),
    });
    const sessionString = client.session.save();
    const userData = await getUserData(userId);
    if (!userData.accounts.some(acc => acc.phone === phone)) {
        userData.accounts.push({ phone: phone, session: sessionString, excluded_channels: [] });
        await saveUserData(userId, userData);
    }
    userState.delete(userId);
    await sendText(chatId, `‚úÖ –ê–∫–∞—É–Ω—Ç ${phone} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!`);
}

async function connectWithSession(sessionString) {
  if (!sessionString) return null;
  const client = new TelegramClient(new StringSession(sessionString), API_ID, API_HASH, { connectionRetries: 5, useWSS: true });
  try {
    await client.connect();
    return client;
  } catch (e) {
    console.error("Failed to connect with session:", e);
    return null;
  }
}

// ============ COMMANDS & LOGIC ============
async function cmdStart(msg) {
    const chatId = msg.chat.id;
    const text = "üëã –í—ñ—Ç–∞—é! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ç–≤–æ—ó—Ö Telegram-–∫–∞–Ω–∞–ª–∞—Ö.";
    const keyboard = {
        inline_keyboard: [[{ text: "‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç", callback_data: "add_account_start" }]]
    };
    await sendText(chatId, text, { reply_markup: keyboard });
}

async function cmdRead(msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const userData = await getUserData(userId);
    if (!userData.accounts || userData.accounts.length === 0) {
        return await sendText(chatId, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å /start.");
    }
    if (userData.accounts.length === 1) {
        await showAccountStats(userId, chatId, null, userData.accounts[0].phone);
    } else {
        const buttons = userData.accounts.map(acc => ([{ text: `üì± ${acc.phone}`, callback_data: `select_account:${acc.phone}` }]));
        await sendText(chatId, "–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏:", { reply_markup: { inline_keyboard: buttons } });
    }
}

async function cmdTransfer(msg, args) {
    const fromId = msg.from.id;
    const chatId = msg.chat.id;
    if (String(fromId) !== String(ADMIN_ID)) {
        return await sendText(chatId, "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.");
    }
    const params = (args || "").split(" ");
    if (params.length !== 3) {
        return await sendText(chatId, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/transfer &lt;source_user_id&gt; &lt;phone_number&gt; &lt;target_user_id&gt;</code>");
    }
    const [sourceId, phone, targetId] = params;
    if (!/^\d+$/.test(sourceId) || !/^\+?\d{10,15}$/.test(phone) || !/^\d+$/.test(targetId)) {
        return await sendText(chatId, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∞–±–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.");
    }
    const allData = await getAllUsersData();
    if (!allData[sourceId]?.accounts) {
        return await sendText(chatId, `‚ùå –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${sourceId} –Ω–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤.`);
    }
    const accountIndex = allData[sourceId].accounts.findIndex(acc => acc.phone === phone);
    if (accountIndex === -1) {
        return await sendText(chatId, `‚ùå –ê–∫–∞—É–Ω—Ç ${phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${sourceId}.`);
    }
    const [accountToTransfer] = allData[sourceId].accounts.splice(accountIndex, 1);
    if (!allData[targetId]) {
        allData[targetId] = { accounts: [] };
    }
    if(allData[targetId].accounts.some(acc => acc.phone === phone)) {
        return await sendText(chatId, `‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${targetId} –≤–∂–µ –º–∞—î –∞–∫–∞—É–Ω—Ç ${phone}.`);
    }
    allData[targetId].accounts.push(accountToTransfer);
    await ghWriteJson(FILE_USERS_DB, allData, `Transfer ${phone} from ${sourceId} to ${targetId}`);
    await sendText(chatId, `‚úÖ –°–µ—Å—ñ—é –¥–ª—è ${phone} —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤—ñ–¥ ${sourceId} –¥–æ ${targetId}.`);
}

// ============ NEW TEST COMMAND ============
async function cmdTestRead(msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    await sendText(chatId, "üß™ **–ü–æ—á–∏–Ω–∞—é —Ç–µ—Å—Ç —á–∏—Ç–∞–Ω–Ω—è...**");

    const userData = await getUserData(userId);
    if (!userData.accounts || userData.accounts.length === 0) {
        return await sendText(chatId, "‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –î–æ–¥–∞–π—Ç–µ –∞–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /start.");
    }

    const firstAccount = userData.accounts[0];
    await sendText(chatId, `üë§ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø–µ—Ä—à–∏–π –∞–∫–∞—É–Ω—Ç: <b>${firstAccount.phone}</b>`);

    const client = await connectWithSession(firstAccount.session);
    if (!client) {
        return await sendText(chatId, "üîå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Å—ñ—ó.");
    }

    try {
        await sendText(chatId, "üîç –®—É–∫–∞—é –ø–µ—Ä—à–∏–π –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π –∫–∞–Ω–∞–ª...");
        const dialogs = await client.getDialogs({ limit: 200 });
        const targetChannelDialog = dialogs.find(d => 
            d.isChannel && 
            d.entity.broadcast && 
            d.unreadCount > 0
        );

        if (!targetChannelDialog) {
            return await sendText(chatId, "‚úÖ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –¥–ª—è —Ç–µ—Å—Ç—É.");
        }

        const { title, unreadCount } = targetChannelDialog;
        await sendText(chatId, `üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª: "<b>${escapeHtml(title)}</b>"\nüì¨ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö: <b>${unreadCount}</b>`);

        await sendText(chatId, "üì© –ù–∞–º–∞–≥–∞—é—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...");
        const messages = await client.getMessages(targetChannelDialog.entity, { limit: unreadCount });
        await sendText(chatId, `üì• –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ <b>${messages.length}</b> –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.`);

        await sendText(chatId, "üìñ –ù–∞–º–∞–≥–∞—é—Å—è –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –∫–∞–Ω–∞–ª —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π...");
        const inputPeer = await client.getInputEntity(targetChannelDialog.entity);
        await client.invoke(new Api.messages.ReadHistory({
            peer: inputPeer,
            max_id: 0
        }));
        await sendText(chatId, "‚úîÔ∏è –ö–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π!");
        await sendText(chatId, "üéâ **–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**");

    } catch (e) {
        console.error("Test Read error:", e);
        await sendText(chatId, `‚ùå **–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é:**\n<code>${escapeHtml(e.message)}</code>`);
    } finally {
        if (client) await client.disconnect();
    }
}


// ============ WEBHOOK HANDLER ============
app.post("/webhook", async (req, res) => {
    try {
        const update = req.body;
        if (update.message) {
            await handleMessage(update.message);
        } else if (update.callback_query) {
            await handleCallbackQuery(update.callback_query);
        }
    } catch (e) {
        console.error("Webhook top-level error:", e);
    } finally {
        res.sendStatus(200);
    }
});

async function handleMessage(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = (msg.text || "").trim();
    const state = userState.get(userId);

    if (text.startsWith("/")) {
        userState.delete(userId);
        const [command, args] = text.split(/ (.*)/s);
        switch (command) {
            case '/start': return cmdStart(msg);
            case '/read': return cmdRead(msg);
            case '/transfer': return cmdTransfer(msg, args);
            case '/testread': return cmdTestRead(msg); // NEW COMMAND
            default:
                return await sendText(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ñ: /start, /read, /testread.");
        }
    }

    if (!state) return;

    switch (state.step) {
        case 'awaiting_phone':
            if (!/^\+?\d{10,15}$/.test(text)) {
                return await sendText(chatId, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: +380XXXXXXXXX");
            }
            const userData = await getUserData(userId);
            if (userData.accounts.some(acc => acc.phone === text)) {
                userState.delete(userId);
                return await sendText(chatId, "–¢–∞–∫–∏–π –∞–∫–∞—É–Ω—Ç –≤–∂–µ –¥–æ–¥–∞–Ω–æ.");
            }
            await sendText(chatId, "–î–æ–±—Ä–µ, —ñ–Ω—ñ—Ü—ñ—é—é –≤—Ö—ñ–¥...");
            startInteractiveLogin(userId, chatId, text).catch(async e => {
                console.error(e);
                await sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.");
                userState.delete(userId);
            });
            break;

        case 'awaiting_code':
            if (state.data?.codeResolver) {
                const code = text.replace(/-/g, "");
                if (!/^\d+$/.test(code)) {
                    return await sendText(chatId, "–ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Ç–∏—Ä–µ.");
                }
                state.data.codeResolver(code);
            }
            break;

        case 'awaiting_2fa':
            if (state.data?.passResolver) {
                state.data.passResolver(text.toLowerCase() === '–Ω–µ–º–∞' ? '' : text);
            }
            break;

        case 'managing_exclusions_list':
            const { phone, channels } = state.data;
            if (text.toLowerCase() === '–∑–∞–≤–µ—Ä—à–∏—Ç–∏') {
                userState.delete(userId);
                await sendText(chatId, "‚úÖ –í–∏–±—ñ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", { reply_markup: { remove_keyboard: true } });
                return await showExclusionMenu(userId, chatId, state.data.messageId, phone);
            }
            const choice = parseInt(text, 10);
            if (isNaN(choice) || choice < 1 || choice > channels.length) return;
            const selectedChannel = channels[choice - 1];
            await addChannelToExclusions(userId, phone, selectedChannel.id.toString());
            await sendText(chatId, `–ö–∞–Ω–∞–ª "${selectedChannel.title}" –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∏–∫–ª—é—á–µ–Ω—å.`);
            await deleteMessage(chatId, state.data.messageId);
            await showExclusionList(userId, chatId, null, phone);
            break;

        case 'awaiting_exclusion_manual': {
            const { phone } = state.data;
            if (text.toLowerCase() === '–∑–∞–≤–µ—Ä—à–∏—Ç–∏') {
                userState.delete(userId);
                await sendText(chatId, "‚úÖ –í–≤–µ–¥–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", { reply_markup: { remove_keyboard: true } });
                return await showExclusionMenu(userId, chatId, null, phone);
            }
            const id = text.match(/-?\d{10,}/)?.[0] || text;
            await addChannelToExclusions(userId, phone, id.toString());
            await sendText(chatId, `‚úÖ ID <code>${escapeHtml(id)}</code> –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∏–∫–ª—é—á–µ–Ω—å.`);
            break;
        }
    }
}

async function handleCallbackQuery(callbackQuery) {
    const userId = callbackQuery.from.id;
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const [action, payload] = callbackQuery.data.split(/:(.*)/s);

    await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, { callback_query_id: callbackQuery.id });

    switch (action) {
        case 'add_account_start':
            userState.set(userId, { step: 'awaiting_phone', data: {} });
            await editText(chatId, messageId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä. +380991234567).", {reply_markup:{}});
            break;
        case 'select_account':
            await showAccountStats(userId, chatId, messageId, payload);
            break;
        case 'start_read':
            await showExclusionMenu(userId, chatId, messageId, payload);
            break;
        case 'manage_exclusions':
            await showExclusionAddOptions(userId, chatId, messageId, payload);
            break;
        case 'exclusion_list_channels':
            await showExclusionList(userId, chatId, messageId, payload);
            break;
        case 'exclusion_add_manual':
             await deleteMessage(chatId, messageId);
             userState.set(userId, { step: 'awaiting_exclusion_manual', data: { phone: payload }});
             await sendText(chatId, "–í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.", {
                 reply_markup: { keyboard: [[{ text: "–ó–∞–≤–µ—Ä—à–∏—Ç–∏" }]], resize_keyboard: true, one_time_keyboard: true }
             });
            break;
        case 'back_to_stats':
            await showAccountStats(userId, chatId, messageId, payload);
            break;
        case 'confirm_read':
            await startReadingProcess(userId, chatId, messageId, payload);
            break;
    }
}

// ============ –õ–û–ì–Ü–ö–ê –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–• –ú–ï–ù–Æ ============
async function showAccountStats(userId, chatId, messageId, phone) {
    const text = `‚è≥ –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –¥–ª—è <b>${phone}</b>...`;
    if (messageId) await editText(chatId, messageId, text, { reply_markup: {} }); else messageId = (await sendText(chatId, text))?.message_id;
    
    const userData = await getUserData(userId);
    const account = userData.accounts.find(acc => acc.phone === phone);
    if (!account) return await editText(chatId, messageId, "–ü–æ–º–∏–ª–∫–∞: –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");

    const client = await connectWithSession(account.session);
    if (!client) return await editText(chatId, messageId, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è.");

    try {
        const dialogs = await client.getDialogs({ limit: 200 });
        const channels = dialogs.filter(d => d.isChannel && d.entity.broadcast);
        let total = channels.length;
        let unreadCount = channels.filter(d => d.unreadCount > 0).length;
        
        const newText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è <b>${phone}</b>:\n` +
                        `–ö–∞–Ω–∞–ª—ñ–≤: <b>${total}</b>, –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö: <b>${unreadCount}</b>\n\n` +
                        `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏", —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑.`;
        const keyboard = { inline_keyboard: [[{ text: "üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç–∏", callback_data: `start_read:${phone}` }]] };
        await editText(chatId, messageId, newText, { reply_markup: keyboard });

    } catch(e) {
        console.error("Error getting dialogs:", e);
        await editText(chatId, messageId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª—ñ–≤.");
    } finally {
        if (client) await client.disconnect();
    }
}

async function showExclusionMenu(userId, chatId, messageId, phone) {
    const userData = await getUserData(userId);
    const account = userData.accounts.find(acc => acc.phone === phone);
    const excluded = account.excluded_channels || [];
    let text = `<b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º–∏ –¥–ª—è ${phone}</b>\n\n`;
    text += excluded.length > 0 ? "–ö–∞–Ω–∞–ª–∏, —è–∫—ñ –±—É–¥—É—Ç—å –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ:\n" + excluded.map(id => `<code>- ${id}</code>`).join('\n') : "–°–ø–∏—Å–æ–∫ –≤–∏–∫–ª—é—á–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–π.";
    const keyboard = {
        inline_keyboard: [
            [{ text: "‚ûï –ö–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º–∏", callback_data: `manage_exclusions:${phone}` }],
            [{ text: "‚úÖ –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data: `confirm_read:${phone}` }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `back_to_stats:${phone}` }]
        ]
    };
    if (messageId) await editText(chatId, messageId, text, { reply_markup: keyboard });
    else await sendText(chatId, text, { reply_markup: keyboard });
}

async function showExclusionAddOptions(userId, chatId, messageId, phone) {
    const text = "–Ø–∫ –¥–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–æ –≤–∏–∫–ª—é—á–µ–Ω—å?";
    const keyboard = {
        inline_keyboard: [
            [{ text: "üìù –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data: `exclusion_list_channels:${phone}` }],
            [{ text: "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ ID", callback_data: `exclusion_add_manual:${phone}` }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `start_read:${phone}` }]
        ]
    };
    await editText(chatId, messageId, text, { reply_markup: keyboard });
}

async function showExclusionList(userId, chatId, messageId, phone) {
    if (messageId) await editText(chatId, messageId, "‚è≥ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤...", {reply_markup: {}});
    else messageId = (await sendText(chatId, "‚è≥ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤..."))?.message_id;
    
    const userData = await getUserData(userId);
    const account = userData.accounts.find(acc => acc.phone === phone);
    const excludedIds = account.excluded_channels || [];
    const client = await connectWithSession(account.session);
    if (!client) return await editText(chatId, messageId, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.");

    try {
        const dialogs = await client.getDialogs({ limit: 200 });
        const channels = dialogs
            .filter(d => d.isChannel && d.entity.broadcast && !excludedIds.includes(d.entity.id.toString()))
            .map(d => ({ id: d.entity.id, title: d.title }));

        if (channels.length === 0) {
            await showExclusionMenu(userId, chatId, messageId, phone);
            return await sendText(chatId, "–ù–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É –≤–∏–∫–ª—é—á–µ–Ω–Ω—è.");
        }

        userState.set(userId, { step: 'managing_exclusions_list', data: { phone, channels, messageId: messageId } });
        let text = "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª—É –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è:\n\n";
        const keyboardButtons = [];
        let row = [];
        channels.forEach((ch, index) => {
            text += `${index + 1}. ${escapeHtml(ch.title)}\n`;
            row.push({ text: String(index + 1) });
            if (row.length === 5) {
                keyboardButtons.push(row);
                row = [];
            }
        });
        if (row.length > 0) keyboardButtons.push(row);
        keyboardButtons.push([{text: "–ó–∞–≤–µ—Ä—à–∏—Ç–∏"}]);
        await editText(chatId, messageId, text, { reply_markup: {} });
        await sendText(chatId, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ:", { 
            reply_markup: { keyboard: keyboardButtons, resize_keyboard: true }
        });
    } catch (e) {
        console.error("Error getting channels for exclusion:", e);
        await editText(chatId, messageId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª—ñ–≤.");
    } finally {
        if (client) await client.disconnect();
    }
}

async function addChannelToExclusions(userId, phone, channelId) {
    const userData = await getUserData(userId);
    const account = userData.accounts.find(acc => acc.phone === phone);
    if (account) {
        if (!account.excluded_channels) account.excluded_channels = [];
        if (!account.excluded_channels.includes(channelId)) {
            account.excluded_channels.push(channelId);
            await saveUserData(userId, userData);
        }
    }
}

// ============ OpenAI –õ–û–ì–Ü–ö–ê ============
async function startReadingProcess(userId, chatId, messageId, phone) {
    await editText(chatId, messageId, "‚è≥ –ü–æ—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å...", {reply_markup:{}});
    const userData = await getUserData(userId);
    const account = userData.accounts.find(acc => acc.phone === phone);
    if (!account) return await editText(chatId, messageId, "–ü–æ–º–∏–ª–∫–∞: –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    const client = await connectWithSession(account.session);
    if (!client) return await editText(chatId, messageId, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è.");

    try {
        const dialogs = await client.getDialogs({ limit: 200 });
        const unreadChannels = dialogs.filter(d => 
            d.isChannel && d.entity.broadcast && d.unreadCount > 0 && 
            !account.excluded_channels.includes(d.entity.id.toString())
        );

        if (unreadChannels.length === 0) {
            return await editText(chatId, messageId, "‚úÖ –ù–µ–º–∞—î –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.");
        }

        await editText(chatId, messageId, `–ó–Ω–∞–π–¥–µ–Ω–æ ${unreadChannels.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤. –ó–±–∏—Ä–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...`);
        const allSummaries = [];
        let channelsProcessed = 0;
        const channelChunks = [];
        for (let i = 0; i < unreadChannels.length; i += 5) {
            channelChunks.push(unreadChannels.slice(i, i + 5));
        }
        
        for (const chunk of channelChunks) {
            let chunkText = "";
            for (const dialog of chunk) {
                const channelEntity = dialog.entity;
                const channelLink = channelEntity.username ? `https://t.me/${channelEntity.username}` : `(private)`;
                chunkText += `---Start ${channelLink}---\n`;
                const messages = await client.getMessages(channelEntity, { limit: dialog.unreadCount });
                for (const msg of messages.reverse()) {
                    if (msg.message) {
                        const msgLink = `https://t.me/${channelEntity.username || 'c/' + channelEntity.id}/${msg.id}`;
                        chunkText += `-Start ${msgLink}-\n${msg.message}\n-End ${msgLink}-\n`;
                    }
                }
                chunkText += `---End ${channelLink}---\n`;
                
                // **–í–ò–ü–†–ê–í–õ–ï–ù–û**: –ù–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ InputPeer
                const inputPeer = await client.getInputEntity(dialog.entity);
                await client.invoke(new Api.messages.ReadHistory({
                    peer: inputPeer,
                    max_id: 0
                }));
            }

            channelsProcessed += chunk.length;
            await editText(chatId, messageId, `–û–±—Ä–æ–±–ª–µ–Ω–æ ${channelsProcessed}/${unreadChannels.length}. –ê–Ω–∞–ª—ñ–∑—É—é...`);
            const summary = await getOpenAISummary(chunkText);
            if (summary) allSummaries.push(summary);
        }
        
        if (allSummaries.length > 0) {
            const finalSummary = "<b>‚ú® –û—Å—å —Ñ—ñ–Ω–∞–ª—å–Ω–∞ –≤–∏–∂–∏–º–∫–∞:</b>\n\n" + allSummaries.join("\n\n---\n\n");
            const MAX_LENGTH = 4096;
            for (let i = 0; i < finalSummary.length; i += MAX_LENGTH) {
                await sendText(chatId, finalSummary.substring(i, i + MAX_LENGTH), { parse_mode: 'HTML', disable_web_page_preview: true });
            }
            await deleteMessage(chatId, messageId);
        } else {
            await editText(chatId, messageId, "‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–∂–∏–º–∫—É.");
        }
    } catch (e) {
        console.error("Reading process error:", e);
        await editText(chatId, messageId, `‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ${e.message}`);
    } finally {
        if (client) await client.disconnect();
    }
}

async function getOpenAISummary(messages) {
    const prompt = `–¢–æ–±—ñ –±—É–¥—É—Ç—å –Ω–∞–¥–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Telegram-–∫–∞–Ω–∞–ª—É. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è: –∑—Ä–æ–±–∏—Ç–∏ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫—É, —á—ñ—Ç–∫—É —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª—É —Å–º–∏—Å–ª–æ–≤—É –≤–∏–∂–∏–º–∫—É –≤—Å—ñ—Ö —Ü–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –í–∞–∂–ª–∏–≤—ñ —É–º–æ–≤–∏: –Ω–µ –≤–∏–≥–∞–¥—É–π –Ω—ñ—á–æ–≥–æ –Ω–æ–≤–æ–≥–æ, –Ω–µ –¥–æ–¥–∞–≤–∞–π –≤–ª–∞—Å–Ω–∏—Ö –¥—É–º–æ–∫. –ü–µ—Ä–µ–¥–∞–π –ª–∏—à–µ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–µ–Ω—Å, –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ –∑–º—ñ—Å—Ç—É. –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –∑ —Ü—ñ—î—ó –≤–∏–∂–∏–º–∫–∏ ‚Äî –Ω—ñ—á–æ–≥–æ –±—ñ–ª—å—à–µ. –Ø–∫—â–æ —Ç–∞–º –±—É–¥–µ —Ä–µ–∫–ª–∞–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏ –π–æ–≥–æ –Ω–µ –¥–æ–¥–∞—î—à –¥–æ –≤–∏–∂–∏–º–∫–∏. –¶–µ –≤–∏–∂–∏–º–∫–∞ –∑ —É—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ä–∞–∑–æ–º —Ä–æ–∑–¥—ñ–ª—è—î—à –ø–æ —Ç–µ–º–∞–º –∞–ª–µ –Ω–µ –ø–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Ü–µ —Å–ø–ª–æ—à–Ω–∏–π —Ç–µ–∫—Å—Ç. –ü–µ—Ä–µ–¥–∞–≤–∞–π –π–æ–≥–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ. –Ø–∫—â–æ —Ç–æ–±—ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª —Ç–æ–¥—ñ —Ç–∏ –π–æ–≥–æ –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –∑ –≤—ñ–¥–∫–∏ —Ü–µ—Ç—É—î—à —Å–∞–º–µ –∑ —è–∫–æ–≥–æ –∫–∞–Ω–∞–ª—É - –ø–µ—Ä–µ–¥–∞—î—à –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤—å—Å–æ–≥–æ —ñ–Ω—à–æ–≥–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–∞—Ä–∫–¥–∞–≤–Ω —Ç—ñ–ª—å–∫–∏ –∑–≤–∏—á–∞–π–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–º: [—Ç–µ–∫—Å—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è](https://example.com). –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—è—é—Ç—å—Å—è —á–µ—Ä–µ–∑ '---'. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:`;
    try {
        const response = await openai.chat.completions.create({
            model: "gpt-4o",
            messages: [
                { role: "system", content: prompt },
                { role: "user", content: messages }
            ],
            temperature: 0.2,
        });
        return response.choices[0].message.content;
    } catch (error) {
        console.error("OpenAI API error:", error);
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–∂–∏–º–∫—É –≤—ñ–¥ AI.";
    }
}

// ============ STARTUP ============
app.get("/", (req, res) => res.send("‚úÖ Bot is running on Render"));
app.get("/webhook", (req, res) => res.send("Webhook endpoint is POST-only. OK ‚úÖ"));

app.listen(PORT, async () => {
  console.log(`Server on ${PORT}`);
  try {
    await ensureDbFile();
    console.log("Database file checked/initialized.");
  } catch (e) {
    console.error("GitHub DB init error:", e?.message || e);
  }
  const host = process.env.RENDER_EXTERNAL_HOSTNAME;
  if (host) {
    const url = `https://${host}/webhook`;
    try {
      await axios.get(`${TELEGRAM_API}/setWebhook`, { params: { url } });
      console.log("Webhook set:", url);
    } catch (e) {
      console.error("setWebhook error:", e?.response?.data || e?.message || e);
    }
  } else {
    console.warn("RENDER_EXTERNAL_HOSTNAME is not set. Set webhook manually.");
  }
});
